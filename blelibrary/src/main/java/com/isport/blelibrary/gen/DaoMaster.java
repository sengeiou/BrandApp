package com.isport.blelibrary.gen;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 28): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 28;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        Bracelet_W311_24HDataModelDao.createTable(db, ifNotExists);
        Bracelet_W311_24H_hr_SettingModelDao.createTable(db, ifNotExists);
        Bracelet_W311_AlarmModelDao.createTable(db, ifNotExists);
        Bracelet_W311_DeviceInfoModelDao.createTable(db, ifNotExists);
        Bracelet_W311_DisplayModelDao.createTable(db, ifNotExists);
        Bracelet_w311_hrModelDao.createTable(db, ifNotExists);
        Bracelet_W311_LiftWristToViewInfoModelDao.createTable(db, ifNotExists);
        Bracelet_W311_RealTimeDataDao.createTable(db, ifNotExists);
        Bracelet_W311_ThridMessageModelDao.createTable(db, ifNotExists);
        Bracelet_W311_WearModelDao.createTable(db, ifNotExists);
        DeviceInformationTableDao.createTable(db, ifNotExists);
        DeviceTempUnitlTableDao.createTable(db, ifNotExists);
        DeviceTypeTableDao.createTable(db, ifNotExists);
        DailyBriefDao.createTable(db, ifNotExists);
        DailySummariesDao.createTable(db, ifNotExists);
        S002_Detail_DataDao.createTable(db, ifNotExists);
        SummaryDao.createTable(db, ifNotExists);
        Scale_FourElectrode_DataModelDao.createTable(db, ifNotExists);
        Sleep_Sleepace_DataModelDao.createTable(db, ifNotExists);
        Sleep_Sleepace_SleepNoticeModelDao.createTable(db, ifNotExists);
        Device_BacklightTimeAndScreenLuminanceModelDao.createTable(db, ifNotExists);
        Device_TempTableDao.createTable(db, ifNotExists);
        BloodPressureModeDao.createTable(db, ifNotExists);
        DeviceTimeFormatDao.createTable(db, ifNotExists);
        FaceWatchModeDao.createTable(db, ifNotExists);
        OneceHrModeDao.createTable(db, ifNotExists);
        OxygenModeDao.createTable(db, ifNotExists);
        W81DeviceDetailDataDao.createTable(db, ifNotExists);
        W81DeviceExerciseDataDao.createTable(db, ifNotExists);
        W81DeviceExerciseHrDataDao.createTable(db, ifNotExists);
        Watch_SmartBand_HandScreenModelDao.createTable(db, ifNotExists);
        Watch_SmartBand_ScreenTimeModelDao.createTable(db, ifNotExists);
        Watch_SmartBand_SportDataModelDao.createTable(db, ifNotExists);
        Watch_SmartBand_StepTargetModelDao.createTable(db, ifNotExists);
        Watch_W516_24HDataModelDao.createTable(db, ifNotExists);
        Watch_W516_AlarmModelDao.createTable(db, ifNotExists);
        Watch_W516_NotifyModelDao.createTable(db, ifNotExists);
        Watch_W516_SedentaryModelDao.createTable(db, ifNotExists);
        Watch_W516_SettingModelDao.createTable(db, ifNotExists);
        Watch_W516_SleepAndNoDisturbModelDao.createTable(db, ifNotExists);
        Watch_W516_SleepDataModelDao.createTable(db, ifNotExists);
        Watch_W560_AlarmModelDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        Bracelet_W311_24HDataModelDao.dropTable(db, ifExists);
        Bracelet_W311_24H_hr_SettingModelDao.dropTable(db, ifExists);
        Bracelet_W311_AlarmModelDao.dropTable(db, ifExists);
        Bracelet_W311_DeviceInfoModelDao.dropTable(db, ifExists);
        Bracelet_W311_DisplayModelDao.dropTable(db, ifExists);
        Bracelet_w311_hrModelDao.dropTable(db, ifExists);
        Bracelet_W311_LiftWristToViewInfoModelDao.dropTable(db, ifExists);
        Bracelet_W311_RealTimeDataDao.dropTable(db, ifExists);
        Bracelet_W311_ThridMessageModelDao.dropTable(db, ifExists);
        Bracelet_W311_WearModelDao.dropTable(db, ifExists);
        DeviceInformationTableDao.dropTable(db, ifExists);
        DeviceTempUnitlTableDao.dropTable(db, ifExists);
        DeviceTypeTableDao.dropTable(db, ifExists);
        DailyBriefDao.dropTable(db, ifExists);
        DailySummariesDao.dropTable(db, ifExists);
        S002_Detail_DataDao.dropTable(db, ifExists);
        SummaryDao.dropTable(db, ifExists);
        Scale_FourElectrode_DataModelDao.dropTable(db, ifExists);
        Sleep_Sleepace_DataModelDao.dropTable(db, ifExists);
        Sleep_Sleepace_SleepNoticeModelDao.dropTable(db, ifExists);
        Device_BacklightTimeAndScreenLuminanceModelDao.dropTable(db, ifExists);
        Device_TempTableDao.dropTable(db, ifExists);
        BloodPressureModeDao.dropTable(db, ifExists);
        DeviceTimeFormatDao.dropTable(db, ifExists);
        FaceWatchModeDao.dropTable(db, ifExists);
        OneceHrModeDao.dropTable(db, ifExists);
        OxygenModeDao.dropTable(db, ifExists);
        W81DeviceDetailDataDao.dropTable(db, ifExists);
        W81DeviceExerciseDataDao.dropTable(db, ifExists);
        W81DeviceExerciseHrDataDao.dropTable(db, ifExists);
        Watch_SmartBand_HandScreenModelDao.dropTable(db, ifExists);
        Watch_SmartBand_ScreenTimeModelDao.dropTable(db, ifExists);
        Watch_SmartBand_SportDataModelDao.dropTable(db, ifExists);
        Watch_SmartBand_StepTargetModelDao.dropTable(db, ifExists);
        Watch_W516_24HDataModelDao.dropTable(db, ifExists);
        Watch_W516_AlarmModelDao.dropTable(db, ifExists);
        Watch_W516_NotifyModelDao.dropTable(db, ifExists);
        Watch_W516_SedentaryModelDao.dropTable(db, ifExists);
        Watch_W516_SettingModelDao.dropTable(db, ifExists);
        Watch_W516_SleepAndNoDisturbModelDao.dropTable(db, ifExists);
        Watch_W516_SleepDataModelDao.dropTable(db, ifExists);
        Watch_W560_AlarmModelDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(Bracelet_W311_24HDataModelDao.class);
        registerDaoClass(Bracelet_W311_24H_hr_SettingModelDao.class);
        registerDaoClass(Bracelet_W311_AlarmModelDao.class);
        registerDaoClass(Bracelet_W311_DeviceInfoModelDao.class);
        registerDaoClass(Bracelet_W311_DisplayModelDao.class);
        registerDaoClass(Bracelet_w311_hrModelDao.class);
        registerDaoClass(Bracelet_W311_LiftWristToViewInfoModelDao.class);
        registerDaoClass(Bracelet_W311_RealTimeDataDao.class);
        registerDaoClass(Bracelet_W311_ThridMessageModelDao.class);
        registerDaoClass(Bracelet_W311_WearModelDao.class);
        registerDaoClass(DeviceInformationTableDao.class);
        registerDaoClass(DeviceTempUnitlTableDao.class);
        registerDaoClass(DeviceTypeTableDao.class);
        registerDaoClass(DailyBriefDao.class);
        registerDaoClass(DailySummariesDao.class);
        registerDaoClass(S002_Detail_DataDao.class);
        registerDaoClass(SummaryDao.class);
        registerDaoClass(Scale_FourElectrode_DataModelDao.class);
        registerDaoClass(Sleep_Sleepace_DataModelDao.class);
        registerDaoClass(Sleep_Sleepace_SleepNoticeModelDao.class);
        registerDaoClass(Device_BacklightTimeAndScreenLuminanceModelDao.class);
        registerDaoClass(Device_TempTableDao.class);
        registerDaoClass(BloodPressureModeDao.class);
        registerDaoClass(DeviceTimeFormatDao.class);
        registerDaoClass(FaceWatchModeDao.class);
        registerDaoClass(OneceHrModeDao.class);
        registerDaoClass(OxygenModeDao.class);
        registerDaoClass(W81DeviceDetailDataDao.class);
        registerDaoClass(W81DeviceExerciseDataDao.class);
        registerDaoClass(W81DeviceExerciseHrDataDao.class);
        registerDaoClass(Watch_SmartBand_HandScreenModelDao.class);
        registerDaoClass(Watch_SmartBand_ScreenTimeModelDao.class);
        registerDaoClass(Watch_SmartBand_SportDataModelDao.class);
        registerDaoClass(Watch_SmartBand_StepTargetModelDao.class);
        registerDaoClass(Watch_W516_24HDataModelDao.class);
        registerDaoClass(Watch_W516_AlarmModelDao.class);
        registerDaoClass(Watch_W516_NotifyModelDao.class);
        registerDaoClass(Watch_W516_SedentaryModelDao.class);
        registerDaoClass(Watch_W516_SettingModelDao.class);
        registerDaoClass(Watch_W516_SleepAndNoDisturbModelDao.class);
        registerDaoClass(Watch_W516_SleepDataModelDao.class);
        registerDaoClass(Watch_W560_AlarmModelDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name) {
            super(context, name);
        }

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(Database db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

}
