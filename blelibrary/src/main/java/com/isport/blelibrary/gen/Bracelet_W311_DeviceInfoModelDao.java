package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.bracelet_w311.Bracelet_W311_DeviceInfoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRACELET__W311__DEVICE_INFO_MODEL".
*/
public class Bracelet_W311_DeviceInfoModelDao extends AbstractDao<Bracelet_W311_DeviceInfoModel, Long> {

    public static final String TABLENAME = "BRACELET__W311__DEVICE_INFO_MODEL";

    /**
     * Properties of entity Bracelet_W311_DeviceInfoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property DeviceModel = new Property(3, String.class, "deviceModel", false, "DEVICE_MODEL");
        public final static Property HardwareVersion = new Property(4, byte.class, "hardwareVersion", false, "HARDWARE_VERSION");
        public final static Property FirmwareHighVersion = new Property(5, int.class, "firmwareHighVersion", false, "FIRMWARE_HIGH_VERSION");
        public final static Property FirmwareLowVersion = new Property(6, int.class, "firmwareLowVersion", false, "FIRMWARE_LOW_VERSION");
        public final static Property PowerLevel = new Property(7, int.class, "powerLevel", false, "POWER_LEVEL");
        public final static Property StatePhoto = new Property(8, int.class, "statePhoto", false, "STATE_PHOTO");
        public final static Property StateLock = new Property(9, int.class, "stateLock", false, "STATE_LOCK");
        public final static Property StateVibrate = new Property(10, int.class, "stateVibrate", false, "STATE_VIBRATE");
        public final static Property StateFindPhone = new Property(11, int.class, "stateFindPhone", false, "STATE_FIND_PHONE");
        public final static Property StateHigh = new Property(12, int.class, "stateHigh", false, "STATE_HIGH");
        public final static Property StateMusic = new Property(13, int.class, "stateMusic", false, "STATE_MUSIC");
        public final static Property StateBleInterface = new Property(14, int.class, "stateBleInterface", false, "STATE_BLE_INTERFACE");
        public final static Property StateProtected = new Property(15, int.class, "stateProtected", false, "STATE_PROTECTED");
        public final static Property StateMenu = new Property(16, int.class, "stateMenu", false, "STATE_MENU");
        public final static Property State5Vibrate = new Property(17, int.class, "state5Vibrate", false, "STATE5_VIBRATE");
        public final static Property StateCallMsg = new Property(18, int.class, "stateCallMsg", false, "STATE_CALL_MSG");
        public final static Property StateConnectVibrate = new Property(19, int.class, "stateConnectVibrate", false, "STATE_CONNECT_VIBRATE");
        public final static Property StatePinCode = new Property(20, int.class, "statePinCode", false, "STATE_PIN_CODE");
        public final static Property CalIconHeart = new Property(21, int.class, "calIconHeart", false, "CAL_ICON_HEART");
        public final static Property CalCaculateMethod = new Property(22, int.class, "calCaculateMethod", false, "CAL_CACULATE_METHOD");
        public final static Property StateSleepInterfaceAndFunc = new Property(23, int.class, "stateSleepInterfaceAndFunc", false, "STATE_SLEEP_INTERFACE_AND_FUNC");
        public final static Property BleRealTimeBroad = new Property(24, int.class, "bleRealTimeBroad", false, "BLE_REAL_TIME_BROAD");
        public final static Property StateleftRight = new Property(25, int.class, "stateleftRight", false, "STATELEFT_RIGHT");
        public final static Property StateAntiLost = new Property(26, int.class, "stateAntiLost", false, "STATE_ANTI_LOST");
        public final static Property StateCallRemind = new Property(27, int.class, "stateCallRemind", false, "STATE_CALL_REMIND");
        public final static Property StateMessageContent = new Property(28, int.class, "stateMessageContent", false, "STATE_MESSAGE_CONTENT");
        public final static Property StateMessageIcon = new Property(29, int.class, "stateMessageIcon", false, "STATE_MESSAGE_ICON");
        public final static Property StateSyncTime = new Property(30, int.class, "stateSyncTime", false, "STATE_SYNC_TIME");
        public final static Property StateShowHook = new Property(31, int.class, "stateShowHook", false, "STATE_SHOW_HOOK");
    };


    public Bracelet_W311_DeviceInfoModelDao(DaoConfig config) {
        super(config);
    }
    
    public Bracelet_W311_DeviceInfoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRACELET__W311__DEVICE_INFO_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"DEVICE_MODEL\" TEXT," + // 3: deviceModel
                "\"HARDWARE_VERSION\" INTEGER NOT NULL ," + // 4: hardwareVersion
                "\"FIRMWARE_HIGH_VERSION\" INTEGER NOT NULL ," + // 5: firmwareHighVersion
                "\"FIRMWARE_LOW_VERSION\" INTEGER NOT NULL ," + // 6: firmwareLowVersion
                "\"POWER_LEVEL\" INTEGER NOT NULL ," + // 7: powerLevel
                "\"STATE_PHOTO\" INTEGER NOT NULL ," + // 8: statePhoto
                "\"STATE_LOCK\" INTEGER NOT NULL ," + // 9: stateLock
                "\"STATE_VIBRATE\" INTEGER NOT NULL ," + // 10: stateVibrate
                "\"STATE_FIND_PHONE\" INTEGER NOT NULL ," + // 11: stateFindPhone
                "\"STATE_HIGH\" INTEGER NOT NULL ," + // 12: stateHigh
                "\"STATE_MUSIC\" INTEGER NOT NULL ," + // 13: stateMusic
                "\"STATE_BLE_INTERFACE\" INTEGER NOT NULL ," + // 14: stateBleInterface
                "\"STATE_PROTECTED\" INTEGER NOT NULL ," + // 15: stateProtected
                "\"STATE_MENU\" INTEGER NOT NULL ," + // 16: stateMenu
                "\"STATE5_VIBRATE\" INTEGER NOT NULL ," + // 17: state5Vibrate
                "\"STATE_CALL_MSG\" INTEGER NOT NULL ," + // 18: stateCallMsg
                "\"STATE_CONNECT_VIBRATE\" INTEGER NOT NULL ," + // 19: stateConnectVibrate
                "\"STATE_PIN_CODE\" INTEGER NOT NULL ," + // 20: statePinCode
                "\"CAL_ICON_HEART\" INTEGER NOT NULL ," + // 21: calIconHeart
                "\"CAL_CACULATE_METHOD\" INTEGER NOT NULL ," + // 22: calCaculateMethod
                "\"STATE_SLEEP_INTERFACE_AND_FUNC\" INTEGER NOT NULL ," + // 23: stateSleepInterfaceAndFunc
                "\"BLE_REAL_TIME_BROAD\" INTEGER NOT NULL ," + // 24: bleRealTimeBroad
                "\"STATELEFT_RIGHT\" INTEGER NOT NULL ," + // 25: stateleftRight
                "\"STATE_ANTI_LOST\" INTEGER NOT NULL ," + // 26: stateAntiLost
                "\"STATE_CALL_REMIND\" INTEGER NOT NULL ," + // 27: stateCallRemind
                "\"STATE_MESSAGE_CONTENT\" INTEGER NOT NULL ," + // 28: stateMessageContent
                "\"STATE_MESSAGE_ICON\" INTEGER NOT NULL ," + // 29: stateMessageIcon
                "\"STATE_SYNC_TIME\" INTEGER NOT NULL ," + // 30: stateSyncTime
                "\"STATE_SHOW_HOOK\" INTEGER NOT NULL );"); // 31: stateShowHook
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRACELET__W311__DEVICE_INFO_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Bracelet_W311_DeviceInfoModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String deviceModel = entity.getDeviceModel();
        if (deviceModel != null) {
            stmt.bindString(4, deviceModel);
        }
        stmt.bindLong(5, entity.getHardwareVersion());
        stmt.bindLong(6, entity.getFirmwareHighVersion());
        stmt.bindLong(7, entity.getFirmwareLowVersion());
        stmt.bindLong(8, entity.getPowerLevel());
        stmt.bindLong(9, entity.getStatePhoto());
        stmt.bindLong(10, entity.getStateLock());
        stmt.bindLong(11, entity.getStateVibrate());
        stmt.bindLong(12, entity.getStateFindPhone());
        stmt.bindLong(13, entity.getStateHigh());
        stmt.bindLong(14, entity.getStateMusic());
        stmt.bindLong(15, entity.getStateBleInterface());
        stmt.bindLong(16, entity.getStateProtected());
        stmt.bindLong(17, entity.getStateMenu());
        stmt.bindLong(18, entity.getState5Vibrate());
        stmt.bindLong(19, entity.getStateCallMsg());
        stmt.bindLong(20, entity.getStateConnectVibrate());
        stmt.bindLong(21, entity.getStatePinCode());
        stmt.bindLong(22, entity.getCalIconHeart());
        stmt.bindLong(23, entity.getCalCaculateMethod());
        stmt.bindLong(24, entity.getStateSleepInterfaceAndFunc());
        stmt.bindLong(25, entity.getBleRealTimeBroad());
        stmt.bindLong(26, entity.getStateleftRight());
        stmt.bindLong(27, entity.getStateAntiLost());
        stmt.bindLong(28, entity.getStateCallRemind());
        stmt.bindLong(29, entity.getStateMessageContent());
        stmt.bindLong(30, entity.getStateMessageIcon());
        stmt.bindLong(31, entity.getStateSyncTime());
        stmt.bindLong(32, entity.getStateShowHook());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Bracelet_W311_DeviceInfoModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String deviceModel = entity.getDeviceModel();
        if (deviceModel != null) {
            stmt.bindString(4, deviceModel);
        }
        stmt.bindLong(5, entity.getHardwareVersion());
        stmt.bindLong(6, entity.getFirmwareHighVersion());
        stmt.bindLong(7, entity.getFirmwareLowVersion());
        stmt.bindLong(8, entity.getPowerLevel());
        stmt.bindLong(9, entity.getStatePhoto());
        stmt.bindLong(10, entity.getStateLock());
        stmt.bindLong(11, entity.getStateVibrate());
        stmt.bindLong(12, entity.getStateFindPhone());
        stmt.bindLong(13, entity.getStateHigh());
        stmt.bindLong(14, entity.getStateMusic());
        stmt.bindLong(15, entity.getStateBleInterface());
        stmt.bindLong(16, entity.getStateProtected());
        stmt.bindLong(17, entity.getStateMenu());
        stmt.bindLong(18, entity.getState5Vibrate());
        stmt.bindLong(19, entity.getStateCallMsg());
        stmt.bindLong(20, entity.getStateConnectVibrate());
        stmt.bindLong(21, entity.getStatePinCode());
        stmt.bindLong(22, entity.getCalIconHeart());
        stmt.bindLong(23, entity.getCalCaculateMethod());
        stmt.bindLong(24, entity.getStateSleepInterfaceAndFunc());
        stmt.bindLong(25, entity.getBleRealTimeBroad());
        stmt.bindLong(26, entity.getStateleftRight());
        stmt.bindLong(27, entity.getStateAntiLost());
        stmt.bindLong(28, entity.getStateCallRemind());
        stmt.bindLong(29, entity.getStateMessageContent());
        stmt.bindLong(30, entity.getStateMessageIcon());
        stmt.bindLong(31, entity.getStateSyncTime());
        stmt.bindLong(32, entity.getStateShowHook());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Bracelet_W311_DeviceInfoModel readEntity(Cursor cursor, int offset) {
        Bracelet_W311_DeviceInfoModel entity = new Bracelet_W311_DeviceInfoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceModel
            (byte) cursor.getShort(offset + 4), // hardwareVersion
            cursor.getInt(offset + 5), // firmwareHighVersion
            cursor.getInt(offset + 6), // firmwareLowVersion
            cursor.getInt(offset + 7), // powerLevel
            cursor.getInt(offset + 8), // statePhoto
            cursor.getInt(offset + 9), // stateLock
            cursor.getInt(offset + 10), // stateVibrate
            cursor.getInt(offset + 11), // stateFindPhone
            cursor.getInt(offset + 12), // stateHigh
            cursor.getInt(offset + 13), // stateMusic
            cursor.getInt(offset + 14), // stateBleInterface
            cursor.getInt(offset + 15), // stateProtected
            cursor.getInt(offset + 16), // stateMenu
            cursor.getInt(offset + 17), // state5Vibrate
            cursor.getInt(offset + 18), // stateCallMsg
            cursor.getInt(offset + 19), // stateConnectVibrate
            cursor.getInt(offset + 20), // statePinCode
            cursor.getInt(offset + 21), // calIconHeart
            cursor.getInt(offset + 22), // calCaculateMethod
            cursor.getInt(offset + 23), // stateSleepInterfaceAndFunc
            cursor.getInt(offset + 24), // bleRealTimeBroad
            cursor.getInt(offset + 25), // stateleftRight
            cursor.getInt(offset + 26), // stateAntiLost
            cursor.getInt(offset + 27), // stateCallRemind
            cursor.getInt(offset + 28), // stateMessageContent
            cursor.getInt(offset + 29), // stateMessageIcon
            cursor.getInt(offset + 30), // stateSyncTime
            cursor.getInt(offset + 31) // stateShowHook
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Bracelet_W311_DeviceInfoModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHardwareVersion((byte) cursor.getShort(offset + 4));
        entity.setFirmwareHighVersion(cursor.getInt(offset + 5));
        entity.setFirmwareLowVersion(cursor.getInt(offset + 6));
        entity.setPowerLevel(cursor.getInt(offset + 7));
        entity.setStatePhoto(cursor.getInt(offset + 8));
        entity.setStateLock(cursor.getInt(offset + 9));
        entity.setStateVibrate(cursor.getInt(offset + 10));
        entity.setStateFindPhone(cursor.getInt(offset + 11));
        entity.setStateHigh(cursor.getInt(offset + 12));
        entity.setStateMusic(cursor.getInt(offset + 13));
        entity.setStateBleInterface(cursor.getInt(offset + 14));
        entity.setStateProtected(cursor.getInt(offset + 15));
        entity.setStateMenu(cursor.getInt(offset + 16));
        entity.setState5Vibrate(cursor.getInt(offset + 17));
        entity.setStateCallMsg(cursor.getInt(offset + 18));
        entity.setStateConnectVibrate(cursor.getInt(offset + 19));
        entity.setStatePinCode(cursor.getInt(offset + 20));
        entity.setCalIconHeart(cursor.getInt(offset + 21));
        entity.setCalCaculateMethod(cursor.getInt(offset + 22));
        entity.setStateSleepInterfaceAndFunc(cursor.getInt(offset + 23));
        entity.setBleRealTimeBroad(cursor.getInt(offset + 24));
        entity.setStateleftRight(cursor.getInt(offset + 25));
        entity.setStateAntiLost(cursor.getInt(offset + 26));
        entity.setStateCallRemind(cursor.getInt(offset + 27));
        entity.setStateMessageContent(cursor.getInt(offset + 28));
        entity.setStateMessageIcon(cursor.getInt(offset + 29));
        entity.setStateSyncTime(cursor.getInt(offset + 30));
        entity.setStateShowHook(cursor.getInt(offset + 31));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Bracelet_W311_DeviceInfoModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Bracelet_W311_DeviceInfoModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
