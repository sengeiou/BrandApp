package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.w811w814.W81DeviceDetailData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "W81_DEVICE_DETAIL_DATA".
*/
public class W81DeviceDetailDataDao extends AbstractDao<W81DeviceDetailData, Long> {

    public static final String TABLENAME = "W81_DEVICE_DETAIL_DATA";

    /**
     * Properties of entity W81DeviceDetailData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property WristbandSportDetailId = new Property(3, String.class, "wristbandSportDetailId", false, "WRISTBAND_SPORT_DETAIL_ID");
        public final static Property DateStr = new Property(4, String.class, "dateStr", false, "DATE_STR");
        public final static Property Timestamp = new Property(5, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Step = new Property(6, int.class, "step", false, "STEP");
        public final static Property Dis = new Property(7, int.class, "dis", false, "DIS");
        public final static Property Cal = new Property(8, int.class, "cal", false, "CAL");
        public final static Property TotalTime = new Property(9, int.class, "totalTime", false, "TOTAL_TIME");
        public final static Property RestfulTime = new Property(10, int.class, "restfulTime", false, "RESTFUL_TIME");
        public final static Property LightTime = new Property(11, int.class, "lightTime", false, "LIGHT_TIME");
        public final static Property SoberTime = new Property(12, int.class, "soberTime", false, "SOBER_TIME");
        public final static Property StepArray = new Property(13, String.class, "stepArray", false, "STEP_ARRAY");
        public final static Property SleepArray = new Property(14, String.class, "sleepArray", false, "SLEEP_ARRAY");
        public final static Property HrArray = new Property(15, String.class, "hrArray", false, "HR_ARRAY");
        public final static Property HasSleep = new Property(16, int.class, "hasSleep", false, "HAS_SLEEP");
        public final static Property HasHR = new Property(17, int.class, "hasHR", false, "HAS_HR");
        public final static Property AvgHR = new Property(18, int.class, "avgHR", false, "AVG_HR");
        public final static Property TimeInterval = new Property(19, int.class, "timeInterval", false, "TIME_INTERVAL");
    };


    public W81DeviceDetailDataDao(DaoConfig config) {
        super(config);
    }
    
    public W81DeviceDetailDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"W81_DEVICE_DETAIL_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"WRISTBAND_SPORT_DETAIL_ID\" TEXT," + // 3: wristbandSportDetailId
                "\"DATE_STR\" TEXT," + // 4: dateStr
                "\"TIMESTAMP\" INTEGER," + // 5: timestamp
                "\"STEP\" INTEGER NOT NULL ," + // 6: step
                "\"DIS\" INTEGER NOT NULL ," + // 7: dis
                "\"CAL\" INTEGER NOT NULL ," + // 8: cal
                "\"TOTAL_TIME\" INTEGER NOT NULL ," + // 9: totalTime
                "\"RESTFUL_TIME\" INTEGER NOT NULL ," + // 10: restfulTime
                "\"LIGHT_TIME\" INTEGER NOT NULL ," + // 11: lightTime
                "\"SOBER_TIME\" INTEGER NOT NULL ," + // 12: soberTime
                "\"STEP_ARRAY\" TEXT," + // 13: stepArray
                "\"SLEEP_ARRAY\" TEXT," + // 14: sleepArray
                "\"HR_ARRAY\" TEXT," + // 15: hrArray
                "\"HAS_SLEEP\" INTEGER NOT NULL ," + // 16: hasSleep
                "\"HAS_HR\" INTEGER NOT NULL ," + // 17: hasHR
                "\"AVG_HR\" INTEGER NOT NULL ," + // 18: avgHR
                "\"TIME_INTERVAL\" INTEGER NOT NULL );"); // 19: timeInterval
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"W81_DEVICE_DETAIL_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, W81DeviceDetailData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String wristbandSportDetailId = entity.getWristbandSportDetailId();
        if (wristbandSportDetailId != null) {
            stmt.bindString(4, wristbandSportDetailId);
        }
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(5, dateStr);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(6, timestamp);
        }
        stmt.bindLong(7, entity.getStep());
        stmt.bindLong(8, entity.getDis());
        stmt.bindLong(9, entity.getCal());
        stmt.bindLong(10, entity.getTotalTime());
        stmt.bindLong(11, entity.getRestfulTime());
        stmt.bindLong(12, entity.getLightTime());
        stmt.bindLong(13, entity.getSoberTime());
 
        String stepArray = entity.getStepArray();
        if (stepArray != null) {
            stmt.bindString(14, stepArray);
        }
 
        String sleepArray = entity.getSleepArray();
        if (sleepArray != null) {
            stmt.bindString(15, sleepArray);
        }
 
        String hrArray = entity.getHrArray();
        if (hrArray != null) {
            stmt.bindString(16, hrArray);
        }
        stmt.bindLong(17, entity.getHasSleep());
        stmt.bindLong(18, entity.getHasHR());
        stmt.bindLong(19, entity.getAvgHR());
        stmt.bindLong(20, entity.getTimeInterval());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, W81DeviceDetailData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String wristbandSportDetailId = entity.getWristbandSportDetailId();
        if (wristbandSportDetailId != null) {
            stmt.bindString(4, wristbandSportDetailId);
        }
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(5, dateStr);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(6, timestamp);
        }
        stmt.bindLong(7, entity.getStep());
        stmt.bindLong(8, entity.getDis());
        stmt.bindLong(9, entity.getCal());
        stmt.bindLong(10, entity.getTotalTime());
        stmt.bindLong(11, entity.getRestfulTime());
        stmt.bindLong(12, entity.getLightTime());
        stmt.bindLong(13, entity.getSoberTime());
 
        String stepArray = entity.getStepArray();
        if (stepArray != null) {
            stmt.bindString(14, stepArray);
        }
 
        String sleepArray = entity.getSleepArray();
        if (sleepArray != null) {
            stmt.bindString(15, sleepArray);
        }
 
        String hrArray = entity.getHrArray();
        if (hrArray != null) {
            stmt.bindString(16, hrArray);
        }
        stmt.bindLong(17, entity.getHasSleep());
        stmt.bindLong(18, entity.getHasHR());
        stmt.bindLong(19, entity.getAvgHR());
        stmt.bindLong(20, entity.getTimeInterval());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public W81DeviceDetailData readEntity(Cursor cursor, int offset) {
        W81DeviceDetailData entity = new W81DeviceDetailData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wristbandSportDetailId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateStr
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // timestamp
            cursor.getInt(offset + 6), // step
            cursor.getInt(offset + 7), // dis
            cursor.getInt(offset + 8), // cal
            cursor.getInt(offset + 9), // totalTime
            cursor.getInt(offset + 10), // restfulTime
            cursor.getInt(offset + 11), // lightTime
            cursor.getInt(offset + 12), // soberTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // stepArray
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sleepArray
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // hrArray
            cursor.getInt(offset + 16), // hasSleep
            cursor.getInt(offset + 17), // hasHR
            cursor.getInt(offset + 18), // avgHR
            cursor.getInt(offset + 19) // timeInterval
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, W81DeviceDetailData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWristbandSportDetailId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDateStr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimestamp(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setStep(cursor.getInt(offset + 6));
        entity.setDis(cursor.getInt(offset + 7));
        entity.setCal(cursor.getInt(offset + 8));
        entity.setTotalTime(cursor.getInt(offset + 9));
        entity.setRestfulTime(cursor.getInt(offset + 10));
        entity.setLightTime(cursor.getInt(offset + 11));
        entity.setSoberTime(cursor.getInt(offset + 12));
        entity.setStepArray(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSleepArray(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setHrArray(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHasSleep(cursor.getInt(offset + 16));
        entity.setHasHR(cursor.getInt(offset + 17));
        entity.setAvgHR(cursor.getInt(offset + 18));
        entity.setTimeInterval(cursor.getInt(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(W81DeviceDetailData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(W81DeviceDetailData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
