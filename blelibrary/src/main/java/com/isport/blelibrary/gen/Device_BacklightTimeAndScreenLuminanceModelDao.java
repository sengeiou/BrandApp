package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.w526.Device_BacklightTimeAndScreenLuminanceModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE__BACKLIGHT_TIME_AND_SCREEN_LUMINANCE_MODEL".
*/
public class Device_BacklightTimeAndScreenLuminanceModelDao extends AbstractDao<Device_BacklightTimeAndScreenLuminanceModel, Long> {

    public static final String TABLENAME = "DEVICE__BACKLIGHT_TIME_AND_SCREEN_LUMINANCE_MODEL";

    /**
     * Properties of entity Device_BacklightTimeAndScreenLuminanceModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property ValuseBacklightTime = new Property(3, int.class, "valuseBacklightTime", false, "VALUSE_BACKLIGHT_TIME");
        public final static Property ValuseScreenLeve = new Property(4, int.class, "valuseScreenLeve", false, "VALUSE_SCREEN_LEVE");
    };


    public Device_BacklightTimeAndScreenLuminanceModelDao(DaoConfig config) {
        super(config);
    }
    
    public Device_BacklightTimeAndScreenLuminanceModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE__BACKLIGHT_TIME_AND_SCREEN_LUMINANCE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"VALUSE_BACKLIGHT_TIME\" INTEGER NOT NULL ," + // 3: valuseBacklightTime
                "\"VALUSE_SCREEN_LEVE\" INTEGER NOT NULL );"); // 4: valuseScreenLeve
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE__BACKLIGHT_TIME_AND_SCREEN_LUMINANCE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device_BacklightTimeAndScreenLuminanceModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
        stmt.bindLong(4, entity.getValuseBacklightTime());
        stmt.bindLong(5, entity.getValuseScreenLeve());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device_BacklightTimeAndScreenLuminanceModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
        stmt.bindLong(4, entity.getValuseBacklightTime());
        stmt.bindLong(5, entity.getValuseScreenLeve());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device_BacklightTimeAndScreenLuminanceModel readEntity(Cursor cursor, int offset) {
        Device_BacklightTimeAndScreenLuminanceModel entity = new Device_BacklightTimeAndScreenLuminanceModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.getInt(offset + 3), // valuseBacklightTime
            cursor.getInt(offset + 4) // valuseScreenLeve
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device_BacklightTimeAndScreenLuminanceModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValuseBacklightTime(cursor.getInt(offset + 3));
        entity.setValuseScreenLeve(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device_BacklightTimeAndScreenLuminanceModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device_BacklightTimeAndScreenLuminanceModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
