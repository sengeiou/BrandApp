package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.s002.S002_Detail_Data;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "S002__DETAIL__DATA".
*/
public class S002_Detail_DataDao extends AbstractDao<S002_Detail_Data, Long> {

    public static final String TABLENAME = "S002__DETAIL__DATA";

    /**
     * Properties of entity S002_Detail_Data.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AverageFrequency = new Property(1, int.class, "averageFrequency", false, "AVERAGE_FREQUENCY");
        public final static Property AverageHeartRate = new Property(2, int.class, "averageHeartRate", false, "AVERAGE_HEART_RATE");
        public final static Property DeviceId = new Property(3, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property EndTime = new Property(4, String.class, "endTime", false, "END_TIME");
        public final static Property ExerciseType = new Property(5, int.class, "exerciseType", false, "EXERCISE_TYPE");
        public final static Property MaxFrequency = new Property(6, int.class, "maxFrequency", false, "MAX_FREQUENCY");
        public final static Property SingleMaxSkippingNum = new Property(7, int.class, "singleMaxSkippingNum", false, "SINGLE_MAX_SKIPPING_NUM");
        public final static Property SkippingDuration = new Property(8, int.class, "skippingDuration", false, "SKIPPING_DURATION");
        public final static Property SkippingNum = new Property(9, int.class, "skippingNum", false, "SKIPPING_NUM");
        public final static Property StumbleNum = new Property(10, int.class, "stumbleNum", false, "STUMBLE_NUM");
        public final static Property TotalCalories = new Property(11, int.class, "totalCalories", false, "TOTAL_CALORIES");
        public final static Property FrequencyArray = new Property(12, String.class, "frequencyArray", false, "FREQUENCY_ARRAY");
        public final static Property HeartRateDetailArray = new Property(13, String.class, "heartRateDetailArray", false, "HEART_RATE_DETAIL_ARRAY");
        public final static Property StartTime = new Property(14, String.class, "startTime", false, "START_TIME");
        public final static Property StumbleArray = new Property(15, String.class, "stumbleArray", false, "STUMBLE_ARRAY");
        public final static Property UserId = new Property(16, String.class, "userId", false, "USER_ID");
        public final static Property Timestamp = new Property(17, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property UpgradeState = new Property(18, int.class, "upgradeState", false, "UPGRADE_STATE");
        public final static Property ChallengeType = new Property(19, int.class, "challengeType", false, "CHALLENGE_TYPE");
    };


    public S002_Detail_DataDao(DaoConfig config) {
        super(config);
    }
    
    public S002_Detail_DataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"S002__DETAIL__DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AVERAGE_FREQUENCY\" INTEGER NOT NULL ," + // 1: averageFrequency
                "\"AVERAGE_HEART_RATE\" INTEGER NOT NULL ," + // 2: averageHeartRate
                "\"DEVICE_ID\" TEXT," + // 3: deviceId
                "\"END_TIME\" TEXT," + // 4: endTime
                "\"EXERCISE_TYPE\" INTEGER NOT NULL ," + // 5: exerciseType
                "\"MAX_FREQUENCY\" INTEGER NOT NULL ," + // 6: maxFrequency
                "\"SINGLE_MAX_SKIPPING_NUM\" INTEGER NOT NULL ," + // 7: singleMaxSkippingNum
                "\"SKIPPING_DURATION\" INTEGER NOT NULL ," + // 8: skippingDuration
                "\"SKIPPING_NUM\" INTEGER NOT NULL ," + // 9: skippingNum
                "\"STUMBLE_NUM\" INTEGER NOT NULL ," + // 10: stumbleNum
                "\"TOTAL_CALORIES\" INTEGER NOT NULL ," + // 11: totalCalories
                "\"FREQUENCY_ARRAY\" TEXT," + // 12: frequencyArray
                "\"HEART_RATE_DETAIL_ARRAY\" TEXT," + // 13: heartRateDetailArray
                "\"START_TIME\" TEXT," + // 14: startTime
                "\"STUMBLE_ARRAY\" TEXT," + // 15: stumbleArray
                "\"USER_ID\" TEXT," + // 16: userId
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 17: timestamp
                "\"UPGRADE_STATE\" INTEGER NOT NULL ," + // 18: upgradeState
                "\"CHALLENGE_TYPE\" INTEGER NOT NULL );"); // 19: challengeType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"S002__DETAIL__DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, S002_Detail_Data entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAverageFrequency());
        stmt.bindLong(3, entity.getAverageHeartRate());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(5, endTime);
        }
        stmt.bindLong(6, entity.getExerciseType());
        stmt.bindLong(7, entity.getMaxFrequency());
        stmt.bindLong(8, entity.getSingleMaxSkippingNum());
        stmt.bindLong(9, entity.getSkippingDuration());
        stmt.bindLong(10, entity.getSkippingNum());
        stmt.bindLong(11, entity.getStumbleNum());
        stmt.bindLong(12, entity.getTotalCalories());
 
        String frequencyArray = entity.getFrequencyArray();
        if (frequencyArray != null) {
            stmt.bindString(13, frequencyArray);
        }
 
        String heartRateDetailArray = entity.getHeartRateDetailArray();
        if (heartRateDetailArray != null) {
            stmt.bindString(14, heartRateDetailArray);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(15, startTime);
        }
 
        String stumbleArray = entity.getStumbleArray();
        if (stumbleArray != null) {
            stmt.bindString(16, stumbleArray);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(17, userId);
        }
        stmt.bindLong(18, entity.getTimestamp());
        stmt.bindLong(19, entity.getUpgradeState());
        stmt.bindLong(20, entity.getChallengeType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, S002_Detail_Data entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAverageFrequency());
        stmt.bindLong(3, entity.getAverageHeartRate());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(5, endTime);
        }
        stmt.bindLong(6, entity.getExerciseType());
        stmt.bindLong(7, entity.getMaxFrequency());
        stmt.bindLong(8, entity.getSingleMaxSkippingNum());
        stmt.bindLong(9, entity.getSkippingDuration());
        stmt.bindLong(10, entity.getSkippingNum());
        stmt.bindLong(11, entity.getStumbleNum());
        stmt.bindLong(12, entity.getTotalCalories());
 
        String frequencyArray = entity.getFrequencyArray();
        if (frequencyArray != null) {
            stmt.bindString(13, frequencyArray);
        }
 
        String heartRateDetailArray = entity.getHeartRateDetailArray();
        if (heartRateDetailArray != null) {
            stmt.bindString(14, heartRateDetailArray);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(15, startTime);
        }
 
        String stumbleArray = entity.getStumbleArray();
        if (stumbleArray != null) {
            stmt.bindString(16, stumbleArray);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(17, userId);
        }
        stmt.bindLong(18, entity.getTimestamp());
        stmt.bindLong(19, entity.getUpgradeState());
        stmt.bindLong(20, entity.getChallengeType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public S002_Detail_Data readEntity(Cursor cursor, int offset) {
        S002_Detail_Data entity = new S002_Detail_Data( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // averageFrequency
            cursor.getInt(offset + 2), // averageHeartRate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endTime
            cursor.getInt(offset + 5), // exerciseType
            cursor.getInt(offset + 6), // maxFrequency
            cursor.getInt(offset + 7), // singleMaxSkippingNum
            cursor.getInt(offset + 8), // skippingDuration
            cursor.getInt(offset + 9), // skippingNum
            cursor.getInt(offset + 10), // stumbleNum
            cursor.getInt(offset + 11), // totalCalories
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // frequencyArray
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // heartRateDetailArray
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // startTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // stumbleArray
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // userId
            cursor.getLong(offset + 17), // timestamp
            cursor.getInt(offset + 18), // upgradeState
            cursor.getInt(offset + 19) // challengeType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, S002_Detail_Data entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAverageFrequency(cursor.getInt(offset + 1));
        entity.setAverageHeartRate(cursor.getInt(offset + 2));
        entity.setDeviceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExerciseType(cursor.getInt(offset + 5));
        entity.setMaxFrequency(cursor.getInt(offset + 6));
        entity.setSingleMaxSkippingNum(cursor.getInt(offset + 7));
        entity.setSkippingDuration(cursor.getInt(offset + 8));
        entity.setSkippingNum(cursor.getInt(offset + 9));
        entity.setStumbleNum(cursor.getInt(offset + 10));
        entity.setTotalCalories(cursor.getInt(offset + 11));
        entity.setFrequencyArray(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHeartRateDetailArray(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStartTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStumbleArray(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUserId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTimestamp(cursor.getLong(offset + 17));
        entity.setUpgradeState(cursor.getInt(offset + 18));
        entity.setChallengeType(cursor.getInt(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(S002_Detail_Data entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(S002_Detail_Data entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
