package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.DeviceInformationTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_INFORMATION_TABLE".
*/
public class DeviceInformationTableDao extends AbstractDao<DeviceInformationTable, Long> {

    public static final String TABLENAME = "DEVICE_INFORMATION_TABLE";

    /**
     * Properties of entity DeviceInformationTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Uuid = new Property(2, String.class, "uuid", false, "UUID");
        public final static Property Mac = new Property(3, String.class, "mac", false, "MAC");
        public final static Property Battery = new Property(4, int.class, "battery", false, "BATTERY");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
    };


    public DeviceInformationTableDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceInformationTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_INFORMATION_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"UUID\" TEXT," + // 2: uuid
                "\"MAC\" TEXT," + // 3: mac
                "\"BATTERY\" INTEGER NOT NULL ," + // 4: battery
                "\"VERSION\" TEXT);"); // 5: version
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_INFORMATION_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceInformationTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(4, mac);
        }
        stmt.bindLong(5, entity.getBattery());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceInformationTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(3, uuid);
        }
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(4, mac);
        }
        stmt.bindLong(5, entity.getBattery());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceInformationTable readEntity(Cursor cursor, int offset) {
        DeviceInformationTable entity = new DeviceInformationTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uuid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mac
            cursor.getInt(offset + 4), // battery
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // version
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceInformationTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUuid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMac(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBattery(cursor.getInt(offset + 4));
        entity.setVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceInformationTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceInformationTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
