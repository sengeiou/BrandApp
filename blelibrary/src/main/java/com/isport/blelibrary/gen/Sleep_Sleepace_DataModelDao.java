package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.sleep.Sleep_Sleepace_DataModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SLEEP__SLEEPACE__DATA_MODEL".
*/
public class Sleep_Sleepace_DataModelDao extends AbstractDao<Sleep_Sleepace_DataModel, Long> {

    public static final String TABLENAME = "SLEEP__SLEEPACE__DATA_MODEL";

    /**
     * Properties of entity Sleep_Sleepace_DataModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property DateStr = new Property(3, String.class, "dateStr", false, "DATE_STR");
        public final static Property Timestamp = new Property(4, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property ReportId = new Property(5, String.class, "reportId", false, "REPORT_ID");
        public final static Property TrunOverStatusAry = new Property(6, String.class, "trunOverStatusAry", false, "TRUN_OVER_STATUS_ARY");
        public final static Property BreathRateAry = new Property(7, String.class, "breathRateAry", false, "BREATH_RATE_ARY");
        public final static Property HeartRateAry = new Property(8, String.class, "heartRateAry", false, "HEART_RATE_ARY");
        public final static Property AverageBreathRate = new Property(9, int.class, "averageBreathRate", false, "AVERAGE_BREATH_RATE");
        public final static Property AverageHeartBeatRate = new Property(10, int.class, "averageHeartBeatRate", false, "AVERAGE_HEART_BEAT_RATE");
        public final static Property LeaveBedTimes = new Property(11, int.class, "leaveBedTimes", false, "LEAVE_BED_TIMES");
        public final static Property TurnOverTimes = new Property(12, int.class, "turnOverTimes", false, "TURN_OVER_TIMES");
        public final static Property BodyMovementTimes = new Property(13, int.class, "bodyMovementTimes", false, "BODY_MOVEMENT_TIMES");
        public final static Property HeartBeatPauseTimes = new Property(14, int.class, "heartBeatPauseTimes", false, "HEART_BEAT_PAUSE_TIMES");
        public final static Property BreathPauseTimes = new Property(15, int.class, "breathPauseTimes", false, "BREATH_PAUSE_TIMES");
        public final static Property HeartBeatPauseAllTime = new Property(16, int.class, "heartBeatPauseAllTime", false, "HEART_BEAT_PAUSE_ALL_TIME");
        public final static Property BreathPauseAllTime = new Property(17, int.class, "breathPauseAllTime", false, "BREATH_PAUSE_ALL_TIME");
        public final static Property LeaveBedAllTime = new Property(18, int.class, "leaveBedAllTime", false, "LEAVE_BED_ALL_TIME");
        public final static Property MaxHeartBeatRate = new Property(19, int.class, "maxHeartBeatRate", false, "MAX_HEART_BEAT_RATE");
        public final static Property MinHeartBeatRate = new Property(20, int.class, "minHeartBeatRate", false, "MIN_HEART_BEAT_RATE");
        public final static Property MaxBreathRate = new Property(21, int.class, "maxBreathRate", false, "MAX_BREATH_RATE");
        public final static Property MinBreathRate = new Property(22, int.class, "minBreathRate", false, "MIN_BREATH_RATE");
        public final static Property HeartBeatRateFastAllTime = new Property(23, int.class, "heartBeatRateFastAllTime", false, "HEART_BEAT_RATE_FAST_ALL_TIME");
        public final static Property HeartBeatRateSlowAllTime = new Property(24, int.class, "heartBeatRateSlowAllTime", false, "HEART_BEAT_RATE_SLOW_ALL_TIME");
        public final static Property BreathRateFastAllTime = new Property(25, int.class, "breathRateFastAllTime", false, "BREATH_RATE_FAST_ALL_TIME");
        public final static Property BreathRateSlowAllTime = new Property(26, int.class, "breathRateSlowAllTime", false, "BREATH_RATE_SLOW_ALL_TIME");
        public final static Property FallAlseepAllTime = new Property(27, int.class, "fallAlseepAllTime", false, "FALL_ALSEEP_ALL_TIME");
        public final static Property SleepDuration = new Property(28, int.class, "sleepDuration", false, "SLEEP_DURATION");
        public final static Property DeepSleepAllTime = new Property(29, int.class, "deepSleepAllTime", false, "DEEP_SLEEP_ALL_TIME");
        public final static Property DeepSleepPercent = new Property(30, int.class, "deepSleepPercent", false, "DEEP_SLEEP_PERCENT");
    };


    public Sleep_Sleepace_DataModelDao(DaoConfig config) {
        super(config);
    }
    
    public Sleep_Sleepace_DataModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SLEEP__SLEEPACE__DATA_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"USER_ID\" TEXT," + // 2: userId
                "\"DATE_STR\" TEXT," + // 3: dateStr
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 4: timestamp
                "\"REPORT_ID\" TEXT," + // 5: reportId
                "\"TRUN_OVER_STATUS_ARY\" TEXT," + // 6: trunOverStatusAry
                "\"BREATH_RATE_ARY\" TEXT," + // 7: breathRateAry
                "\"HEART_RATE_ARY\" TEXT," + // 8: heartRateAry
                "\"AVERAGE_BREATH_RATE\" INTEGER NOT NULL ," + // 9: averageBreathRate
                "\"AVERAGE_HEART_BEAT_RATE\" INTEGER NOT NULL ," + // 10: averageHeartBeatRate
                "\"LEAVE_BED_TIMES\" INTEGER NOT NULL ," + // 11: leaveBedTimes
                "\"TURN_OVER_TIMES\" INTEGER NOT NULL ," + // 12: turnOverTimes
                "\"BODY_MOVEMENT_TIMES\" INTEGER NOT NULL ," + // 13: bodyMovementTimes
                "\"HEART_BEAT_PAUSE_TIMES\" INTEGER NOT NULL ," + // 14: heartBeatPauseTimes
                "\"BREATH_PAUSE_TIMES\" INTEGER NOT NULL ," + // 15: breathPauseTimes
                "\"HEART_BEAT_PAUSE_ALL_TIME\" INTEGER NOT NULL ," + // 16: heartBeatPauseAllTime
                "\"BREATH_PAUSE_ALL_TIME\" INTEGER NOT NULL ," + // 17: breathPauseAllTime
                "\"LEAVE_BED_ALL_TIME\" INTEGER NOT NULL ," + // 18: leaveBedAllTime
                "\"MAX_HEART_BEAT_RATE\" INTEGER NOT NULL ," + // 19: maxHeartBeatRate
                "\"MIN_HEART_BEAT_RATE\" INTEGER NOT NULL ," + // 20: minHeartBeatRate
                "\"MAX_BREATH_RATE\" INTEGER NOT NULL ," + // 21: maxBreathRate
                "\"MIN_BREATH_RATE\" INTEGER NOT NULL ," + // 22: minBreathRate
                "\"HEART_BEAT_RATE_FAST_ALL_TIME\" INTEGER NOT NULL ," + // 23: heartBeatRateFastAllTime
                "\"HEART_BEAT_RATE_SLOW_ALL_TIME\" INTEGER NOT NULL ," + // 24: heartBeatRateSlowAllTime
                "\"BREATH_RATE_FAST_ALL_TIME\" INTEGER NOT NULL ," + // 25: breathRateFastAllTime
                "\"BREATH_RATE_SLOW_ALL_TIME\" INTEGER NOT NULL ," + // 26: breathRateSlowAllTime
                "\"FALL_ALSEEP_ALL_TIME\" INTEGER NOT NULL ," + // 27: fallAlseepAllTime
                "\"SLEEP_DURATION\" INTEGER NOT NULL ," + // 28: sleepDuration
                "\"DEEP_SLEEP_ALL_TIME\" INTEGER NOT NULL ," + // 29: deepSleepAllTime
                "\"DEEP_SLEEP_PERCENT\" INTEGER NOT NULL );"); // 30: deepSleepPercent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SLEEP__SLEEPACE__DATA_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sleep_Sleepace_DataModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(4, dateStr);
        }
        stmt.bindLong(5, entity.getTimestamp());
 
        String reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindString(6, reportId);
        }
 
        String trunOverStatusAry = entity.getTrunOverStatusAry();
        if (trunOverStatusAry != null) {
            stmt.bindString(7, trunOverStatusAry);
        }
 
        String breathRateAry = entity.getBreathRateAry();
        if (breathRateAry != null) {
            stmt.bindString(8, breathRateAry);
        }
 
        String heartRateAry = entity.getHeartRateAry();
        if (heartRateAry != null) {
            stmt.bindString(9, heartRateAry);
        }
        stmt.bindLong(10, entity.getAverageBreathRate());
        stmt.bindLong(11, entity.getAverageHeartBeatRate());
        stmt.bindLong(12, entity.getLeaveBedTimes());
        stmt.bindLong(13, entity.getTurnOverTimes());
        stmt.bindLong(14, entity.getBodyMovementTimes());
        stmt.bindLong(15, entity.getHeartBeatPauseTimes());
        stmt.bindLong(16, entity.getBreathPauseTimes());
        stmt.bindLong(17, entity.getHeartBeatPauseAllTime());
        stmt.bindLong(18, entity.getBreathPauseAllTime());
        stmt.bindLong(19, entity.getLeaveBedAllTime());
        stmt.bindLong(20, entity.getMaxHeartBeatRate());
        stmt.bindLong(21, entity.getMinHeartBeatRate());
        stmt.bindLong(22, entity.getMaxBreathRate());
        stmt.bindLong(23, entity.getMinBreathRate());
        stmt.bindLong(24, entity.getHeartBeatRateFastAllTime());
        stmt.bindLong(25, entity.getHeartBeatRateSlowAllTime());
        stmt.bindLong(26, entity.getBreathRateFastAllTime());
        stmt.bindLong(27, entity.getBreathRateSlowAllTime());
        stmt.bindLong(28, entity.getFallAlseepAllTime());
        stmt.bindLong(29, entity.getSleepDuration());
        stmt.bindLong(30, entity.getDeepSleepAllTime());
        stmt.bindLong(31, entity.getDeepSleepPercent());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sleep_Sleepace_DataModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(4, dateStr);
        }
        stmt.bindLong(5, entity.getTimestamp());
 
        String reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindString(6, reportId);
        }
 
        String trunOverStatusAry = entity.getTrunOverStatusAry();
        if (trunOverStatusAry != null) {
            stmt.bindString(7, trunOverStatusAry);
        }
 
        String breathRateAry = entity.getBreathRateAry();
        if (breathRateAry != null) {
            stmt.bindString(8, breathRateAry);
        }
 
        String heartRateAry = entity.getHeartRateAry();
        if (heartRateAry != null) {
            stmt.bindString(9, heartRateAry);
        }
        stmt.bindLong(10, entity.getAverageBreathRate());
        stmt.bindLong(11, entity.getAverageHeartBeatRate());
        stmt.bindLong(12, entity.getLeaveBedTimes());
        stmt.bindLong(13, entity.getTurnOverTimes());
        stmt.bindLong(14, entity.getBodyMovementTimes());
        stmt.bindLong(15, entity.getHeartBeatPauseTimes());
        stmt.bindLong(16, entity.getBreathPauseTimes());
        stmt.bindLong(17, entity.getHeartBeatPauseAllTime());
        stmt.bindLong(18, entity.getBreathPauseAllTime());
        stmt.bindLong(19, entity.getLeaveBedAllTime());
        stmt.bindLong(20, entity.getMaxHeartBeatRate());
        stmt.bindLong(21, entity.getMinHeartBeatRate());
        stmt.bindLong(22, entity.getMaxBreathRate());
        stmt.bindLong(23, entity.getMinBreathRate());
        stmt.bindLong(24, entity.getHeartBeatRateFastAllTime());
        stmt.bindLong(25, entity.getHeartBeatRateSlowAllTime());
        stmt.bindLong(26, entity.getBreathRateFastAllTime());
        stmt.bindLong(27, entity.getBreathRateSlowAllTime());
        stmt.bindLong(28, entity.getFallAlseepAllTime());
        stmt.bindLong(29, entity.getSleepDuration());
        stmt.bindLong(30, entity.getDeepSleepAllTime());
        stmt.bindLong(31, entity.getDeepSleepPercent());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sleep_Sleepace_DataModel readEntity(Cursor cursor, int offset) {
        Sleep_Sleepace_DataModel entity = new Sleep_Sleepace_DataModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dateStr
            cursor.getLong(offset + 4), // timestamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reportId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // trunOverStatusAry
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // breathRateAry
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // heartRateAry
            cursor.getInt(offset + 9), // averageBreathRate
            cursor.getInt(offset + 10), // averageHeartBeatRate
            cursor.getInt(offset + 11), // leaveBedTimes
            cursor.getInt(offset + 12), // turnOverTimes
            cursor.getInt(offset + 13), // bodyMovementTimes
            cursor.getInt(offset + 14), // heartBeatPauseTimes
            cursor.getInt(offset + 15), // breathPauseTimes
            cursor.getInt(offset + 16), // heartBeatPauseAllTime
            cursor.getInt(offset + 17), // breathPauseAllTime
            cursor.getInt(offset + 18), // leaveBedAllTime
            cursor.getInt(offset + 19), // maxHeartBeatRate
            cursor.getInt(offset + 20), // minHeartBeatRate
            cursor.getInt(offset + 21), // maxBreathRate
            cursor.getInt(offset + 22), // minBreathRate
            cursor.getInt(offset + 23), // heartBeatRateFastAllTime
            cursor.getInt(offset + 24), // heartBeatRateSlowAllTime
            cursor.getInt(offset + 25), // breathRateFastAllTime
            cursor.getInt(offset + 26), // breathRateSlowAllTime
            cursor.getInt(offset + 27), // fallAlseepAllTime
            cursor.getInt(offset + 28), // sleepDuration
            cursor.getInt(offset + 29), // deepSleepAllTime
            cursor.getInt(offset + 30) // deepSleepPercent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sleep_Sleepace_DataModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDateStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimestamp(cursor.getLong(offset + 4));
        entity.setReportId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTrunOverStatusAry(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBreathRateAry(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHeartRateAry(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAverageBreathRate(cursor.getInt(offset + 9));
        entity.setAverageHeartBeatRate(cursor.getInt(offset + 10));
        entity.setLeaveBedTimes(cursor.getInt(offset + 11));
        entity.setTurnOverTimes(cursor.getInt(offset + 12));
        entity.setBodyMovementTimes(cursor.getInt(offset + 13));
        entity.setHeartBeatPauseTimes(cursor.getInt(offset + 14));
        entity.setBreathPauseTimes(cursor.getInt(offset + 15));
        entity.setHeartBeatPauseAllTime(cursor.getInt(offset + 16));
        entity.setBreathPauseAllTime(cursor.getInt(offset + 17));
        entity.setLeaveBedAllTime(cursor.getInt(offset + 18));
        entity.setMaxHeartBeatRate(cursor.getInt(offset + 19));
        entity.setMinHeartBeatRate(cursor.getInt(offset + 20));
        entity.setMaxBreathRate(cursor.getInt(offset + 21));
        entity.setMinBreathRate(cursor.getInt(offset + 22));
        entity.setHeartBeatRateFastAllTime(cursor.getInt(offset + 23));
        entity.setHeartBeatRateSlowAllTime(cursor.getInt(offset + 24));
        entity.setBreathRateFastAllTime(cursor.getInt(offset + 25));
        entity.setBreathRateSlowAllTime(cursor.getInt(offset + 26));
        entity.setFallAlseepAllTime(cursor.getInt(offset + 27));
        entity.setSleepDuration(cursor.getInt(offset + 28));
        entity.setDeepSleepAllTime(cursor.getInt(offset + 29));
        entity.setDeepSleepPercent(cursor.getInt(offset + 30));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sleep_Sleepace_DataModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sleep_Sleepace_DataModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
