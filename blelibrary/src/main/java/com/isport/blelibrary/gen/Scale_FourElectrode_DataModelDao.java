package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.scale.Scale_FourElectrode_DataModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCALE__FOUR_ELECTRODE__DATA_MODEL".
*/
public class Scale_FourElectrode_DataModelDao extends AbstractDao<Scale_FourElectrode_DataModel, Long> {

    public static final String TABLENAME = "SCALE__FOUR_ELECTRODE__DATA_MODEL";

    /**
     * Properties of entity Scale_FourElectrode_DataModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property DateStr = new Property(3, String.class, "dateStr", false, "DATE_STR");
        public final static Property Timestamp = new Property(4, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Sex = new Property(5, int.class, "sex", false, "SEX");
        public final static Property Hight = new Property(6, int.class, "hight", false, "HIGHT");
        public final static Property Age = new Property(7, int.class, "age", false, "AGE");
        public final static Property R = new Property(8, int.class, "r", false, "R");
        public final static Property ReportId = new Property(9, String.class, "reportId", false, "REPORT_ID");
        public final static Property Weight = new Property(10, float.class, "weight", false, "WEIGHT");
        public final static Property BFP = new Property(11, double.class, "BFP", false, "BFP");
        public final static Property SLM = new Property(12, double.class, "SLM", false, "SLM");
        public final static Property BWP = new Property(13, double.class, "BWP", false, "BWP");
        public final static Property BMC = new Property(14, double.class, "BMC", false, "BMC");
        public final static Property VFR = new Property(15, double.class, "VFR", false, "VFR");
        public final static Property PP = new Property(16, double.class, "PP", false, "PP");
        public final static Property SMM = new Property(17, double.class, "SMM", false, "SMM");
        public final static Property BMR = new Property(18, double.class, "BMR", false, "BMR");
        public final static Property BMI = new Property(19, double.class, "BMI", false, "BMI");
        public final static Property SBW = new Property(20, double.class, "SBW", false, "SBW");
        public final static Property MC = new Property(21, double.class, "MC", false, "MC");
        public final static Property WC = new Property(22, double.class, "WC", false, "WC");
        public final static Property FC = new Property(23, double.class, "FC", false, "FC");
        public final static Property MA = new Property(24, int.class, "MA", false, "MA");
        public final static Property SBC = new Property(25, int.class, "SBC", false, "SBC");
    };


    public Scale_FourElectrode_DataModelDao(DaoConfig config) {
        super(config);
    }
    
    public Scale_FourElectrode_DataModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCALE__FOUR_ELECTRODE__DATA_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"USER_ID\" TEXT," + // 2: userId
                "\"DATE_STR\" TEXT," + // 3: dateStr
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 4: timestamp
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"HIGHT\" INTEGER NOT NULL ," + // 6: hight
                "\"AGE\" INTEGER NOT NULL ," + // 7: age
                "\"R\" INTEGER NOT NULL ," + // 8: r
                "\"REPORT_ID\" TEXT," + // 9: reportId
                "\"WEIGHT\" REAL NOT NULL ," + // 10: weight
                "\"BFP\" REAL NOT NULL ," + // 11: BFP
                "\"SLM\" REAL NOT NULL ," + // 12: SLM
                "\"BWP\" REAL NOT NULL ," + // 13: BWP
                "\"BMC\" REAL NOT NULL ," + // 14: BMC
                "\"VFR\" REAL NOT NULL ," + // 15: VFR
                "\"PP\" REAL NOT NULL ," + // 16: PP
                "\"SMM\" REAL NOT NULL ," + // 17: SMM
                "\"BMR\" REAL NOT NULL ," + // 18: BMR
                "\"BMI\" REAL NOT NULL ," + // 19: BMI
                "\"SBW\" REAL NOT NULL ," + // 20: SBW
                "\"MC\" REAL NOT NULL ," + // 21: MC
                "\"WC\" REAL NOT NULL ," + // 22: WC
                "\"FC\" REAL NOT NULL ," + // 23: FC
                "\"MA\" INTEGER NOT NULL ," + // 24: MA
                "\"SBC\" INTEGER NOT NULL );"); // 25: SBC
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCALE__FOUR_ELECTRODE__DATA_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Scale_FourElectrode_DataModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(4, dateStr);
        }
        stmt.bindLong(5, entity.getTimestamp());
        stmt.bindLong(6, entity.getSex());
        stmt.bindLong(7, entity.getHight());
        stmt.bindLong(8, entity.getAge());
        stmt.bindLong(9, entity.getR());
 
        String reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindString(10, reportId);
        }
        stmt.bindDouble(11, entity.getWeight());
        stmt.bindDouble(12, entity.getBFP());
        stmt.bindDouble(13, entity.getSLM());
        stmt.bindDouble(14, entity.getBWP());
        stmt.bindDouble(15, entity.getBMC());
        stmt.bindDouble(16, entity.getVFR());
        stmt.bindDouble(17, entity.getPP());
        stmt.bindDouble(18, entity.getSMM());
        stmt.bindDouble(19, entity.getBMR());
        stmt.bindDouble(20, entity.getBMI());
        stmt.bindDouble(21, entity.getSBW());
        stmt.bindDouble(22, entity.getMC());
        stmt.bindDouble(23, entity.getWC());
        stmt.bindDouble(24, entity.getFC());
        stmt.bindLong(25, entity.getMA());
        stmt.bindLong(26, entity.getSBC());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Scale_FourElectrode_DataModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(4, dateStr);
        }
        stmt.bindLong(5, entity.getTimestamp());
        stmt.bindLong(6, entity.getSex());
        stmt.bindLong(7, entity.getHight());
        stmt.bindLong(8, entity.getAge());
        stmt.bindLong(9, entity.getR());
 
        String reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindString(10, reportId);
        }
        stmt.bindDouble(11, entity.getWeight());
        stmt.bindDouble(12, entity.getBFP());
        stmt.bindDouble(13, entity.getSLM());
        stmt.bindDouble(14, entity.getBWP());
        stmt.bindDouble(15, entity.getBMC());
        stmt.bindDouble(16, entity.getVFR());
        stmt.bindDouble(17, entity.getPP());
        stmt.bindDouble(18, entity.getSMM());
        stmt.bindDouble(19, entity.getBMR());
        stmt.bindDouble(20, entity.getBMI());
        stmt.bindDouble(21, entity.getSBW());
        stmt.bindDouble(22, entity.getMC());
        stmt.bindDouble(23, entity.getWC());
        stmt.bindDouble(24, entity.getFC());
        stmt.bindLong(25, entity.getMA());
        stmt.bindLong(26, entity.getSBC());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Scale_FourElectrode_DataModel readEntity(Cursor cursor, int offset) {
        Scale_FourElectrode_DataModel entity = new Scale_FourElectrode_DataModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dateStr
            cursor.getLong(offset + 4), // timestamp
            cursor.getInt(offset + 5), // sex
            cursor.getInt(offset + 6), // hight
            cursor.getInt(offset + 7), // age
            cursor.getInt(offset + 8), // r
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // reportId
            cursor.getFloat(offset + 10), // weight
            cursor.getDouble(offset + 11), // BFP
            cursor.getDouble(offset + 12), // SLM
            cursor.getDouble(offset + 13), // BWP
            cursor.getDouble(offset + 14), // BMC
            cursor.getDouble(offset + 15), // VFR
            cursor.getDouble(offset + 16), // PP
            cursor.getDouble(offset + 17), // SMM
            cursor.getDouble(offset + 18), // BMR
            cursor.getDouble(offset + 19), // BMI
            cursor.getDouble(offset + 20), // SBW
            cursor.getDouble(offset + 21), // MC
            cursor.getDouble(offset + 22), // WC
            cursor.getDouble(offset + 23), // FC
            cursor.getInt(offset + 24), // MA
            cursor.getInt(offset + 25) // SBC
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Scale_FourElectrode_DataModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDateStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimestamp(cursor.getLong(offset + 4));
        entity.setSex(cursor.getInt(offset + 5));
        entity.setHight(cursor.getInt(offset + 6));
        entity.setAge(cursor.getInt(offset + 7));
        entity.setR(cursor.getInt(offset + 8));
        entity.setReportId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeight(cursor.getFloat(offset + 10));
        entity.setBFP(cursor.getDouble(offset + 11));
        entity.setSLM(cursor.getDouble(offset + 12));
        entity.setBWP(cursor.getDouble(offset + 13));
        entity.setBMC(cursor.getDouble(offset + 14));
        entity.setVFR(cursor.getDouble(offset + 15));
        entity.setPP(cursor.getDouble(offset + 16));
        entity.setSMM(cursor.getDouble(offset + 17));
        entity.setBMR(cursor.getDouble(offset + 18));
        entity.setBMI(cursor.getDouble(offset + 19));
        entity.setSBW(cursor.getDouble(offset + 20));
        entity.setMC(cursor.getDouble(offset + 21));
        entity.setWC(cursor.getDouble(offset + 22));
        entity.setFC(cursor.getDouble(offset + 23));
        entity.setMA(cursor.getInt(offset + 24));
        entity.setSBC(cursor.getInt(offset + 25));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Scale_FourElectrode_DataModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Scale_FourElectrode_DataModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
