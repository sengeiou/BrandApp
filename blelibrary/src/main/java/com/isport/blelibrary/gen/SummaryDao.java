package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.s002.Summary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUMMARY".
*/
public class SummaryDao extends AbstractDao<Summary, Long> {

    public static final String TABLENAME = "SUMMARY";

    /**
     * Properties of entity Summary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TotalSkippingNum = new Property(1, String.class, "totalSkippingNum", false, "TOTAL_SKIPPING_NUM");
        public final static Property TotalDuration = new Property(2, int.class, "totalDuration", false, "TOTAL_DURATION");
        public final static Property TotalTimes = new Property(3, String.class, "totalTimes", false, "TOTAL_TIMES");
        public final static Property TotalCalories = new Property(4, String.class, "totalCalories", false, "TOTAL_CALORIES");
        public final static Property Hour = new Property(5, String.class, "hour", false, "HOUR");
        public final static Property Min = new Property(6, String.class, "min", false, "MIN");
        public final static Property StrTime = new Property(7, String.class, "strTime", false, "STR_TIME");
        public final static Property UserId = new Property(8, String.class, "userId", false, "USER_ID");
        public final static Property SummaryType = new Property(9, String.class, "summaryType", false, "SUMMARY_TYPE");
        public final static Property Day = new Property(10, String.class, "day", false, "DAY");
        public final static Property IsLocation = new Property(11, boolean.class, "isLocation", false, "IS_LOCATION");
    };


    public SummaryDao(DaoConfig config) {
        super(config);
    }
    
    public SummaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUMMARY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOTAL_SKIPPING_NUM\" TEXT," + // 1: totalSkippingNum
                "\"TOTAL_DURATION\" INTEGER NOT NULL ," + // 2: totalDuration
                "\"TOTAL_TIMES\" TEXT," + // 3: totalTimes
                "\"TOTAL_CALORIES\" TEXT," + // 4: totalCalories
                "\"HOUR\" TEXT," + // 5: hour
                "\"MIN\" TEXT," + // 6: min
                "\"STR_TIME\" TEXT," + // 7: strTime
                "\"USER_ID\" TEXT," + // 8: userId
                "\"SUMMARY_TYPE\" TEXT," + // 9: summaryType
                "\"DAY\" TEXT," + // 10: day
                "\"IS_LOCATION\" INTEGER NOT NULL );"); // 11: isLocation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUMMARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Summary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String totalSkippingNum = entity.getTotalSkippingNum();
        if (totalSkippingNum != null) {
            stmt.bindString(2, totalSkippingNum);
        }
        stmt.bindLong(3, entity.getTotalDuration());
 
        String totalTimes = entity.getTotalTimes();
        if (totalTimes != null) {
            stmt.bindString(4, totalTimes);
        }
 
        String totalCalories = entity.getTotalCalories();
        if (totalCalories != null) {
            stmt.bindString(5, totalCalories);
        }
 
        String hour = entity.getHour();
        if (hour != null) {
            stmt.bindString(6, hour);
        }
 
        String min = entity.getMin();
        if (min != null) {
            stmt.bindString(7, min);
        }
 
        String strTime = entity.getStrTime();
        if (strTime != null) {
            stmt.bindString(8, strTime);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(9, userId);
        }
 
        String summaryType = entity.getSummaryType();
        if (summaryType != null) {
            stmt.bindString(10, summaryType);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(11, day);
        }
        stmt.bindLong(12, entity.getIsLocation() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Summary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String totalSkippingNum = entity.getTotalSkippingNum();
        if (totalSkippingNum != null) {
            stmt.bindString(2, totalSkippingNum);
        }
        stmt.bindLong(3, entity.getTotalDuration());
 
        String totalTimes = entity.getTotalTimes();
        if (totalTimes != null) {
            stmt.bindString(4, totalTimes);
        }
 
        String totalCalories = entity.getTotalCalories();
        if (totalCalories != null) {
            stmt.bindString(5, totalCalories);
        }
 
        String hour = entity.getHour();
        if (hour != null) {
            stmt.bindString(6, hour);
        }
 
        String min = entity.getMin();
        if (min != null) {
            stmt.bindString(7, min);
        }
 
        String strTime = entity.getStrTime();
        if (strTime != null) {
            stmt.bindString(8, strTime);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(9, userId);
        }
 
        String summaryType = entity.getSummaryType();
        if (summaryType != null) {
            stmt.bindString(10, summaryType);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(11, day);
        }
        stmt.bindLong(12, entity.getIsLocation() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Summary readEntity(Cursor cursor, int offset) {
        Summary entity = new Summary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // totalSkippingNum
            cursor.getInt(offset + 2), // totalDuration
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // totalTimes
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // totalCalories
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hour
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // min
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // strTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // summaryType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // day
            cursor.getShort(offset + 11) != 0 // isLocation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Summary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotalSkippingNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotalDuration(cursor.getInt(offset + 2));
        entity.setTotalTimes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalCalories(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHour(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStrTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSummaryType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDay(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsLocation(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Summary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Summary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
