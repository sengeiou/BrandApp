package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.watch.Watch_SmartBand_SportDataModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WATCH__SMART_BAND__SPORT_DATA_MODEL".
*/
public class Watch_SmartBand_SportDataModelDao extends AbstractDao<Watch_SmartBand_SportDataModel, Long> {

    public static final String TABLENAME = "WATCH__SMART_BAND__SPORT_DATA_MODEL";

    /**
     * Properties of entity Watch_SmartBand_SportDataModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TotalSteps = new Property(1, int.class, "totalSteps", false, "TOTAL_STEPS");
        public final static Property TotalDistance = new Property(2, float.class, "totalDistance", false, "TOTAL_DISTANCE");
        public final static Property TotalCalories = new Property(3, int.class, "totalCalories", false, "TOTAL_CALORIES");
        public final static Property DateStr = new Property(4, String.class, "dateStr", false, "DATE_STR");
        public final static Property DeviceId = new Property(5, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
        public final static Property Timestamp = new Property(7, long.class, "timestamp", false, "TIMESTAMP");
    };


    public Watch_SmartBand_SportDataModelDao(DaoConfig config) {
        super(config);
    }
    
    public Watch_SmartBand_SportDataModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WATCH__SMART_BAND__SPORT_DATA_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOTAL_STEPS\" INTEGER NOT NULL ," + // 1: totalSteps
                "\"TOTAL_DISTANCE\" REAL NOT NULL ," + // 2: totalDistance
                "\"TOTAL_CALORIES\" INTEGER NOT NULL ," + // 3: totalCalories
                "\"DATE_STR\" TEXT," + // 4: dateStr
                "\"DEVICE_ID\" TEXT," + // 5: deviceId
                "\"USER_ID\" TEXT," + // 6: userId
                "\"TIMESTAMP\" INTEGER NOT NULL );"); // 7: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WATCH__SMART_BAND__SPORT_DATA_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Watch_SmartBand_SportDataModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTotalSteps());
        stmt.bindDouble(3, entity.getTotalDistance());
        stmt.bindLong(4, entity.getTotalCalories());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(5, dateStr);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Watch_SmartBand_SportDataModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTotalSteps());
        stmt.bindDouble(3, entity.getTotalDistance());
        stmt.bindLong(4, entity.getTotalCalories());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(5, dateStr);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(7, userId);
        }
        stmt.bindLong(8, entity.getTimestamp());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Watch_SmartBand_SportDataModel readEntity(Cursor cursor, int offset) {
        Watch_SmartBand_SportDataModel entity = new Watch_SmartBand_SportDataModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // totalSteps
            cursor.getFloat(offset + 2), // totalDistance
            cursor.getInt(offset + 3), // totalCalories
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateStr
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userId
            cursor.getLong(offset + 7) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Watch_SmartBand_SportDataModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotalSteps(cursor.getInt(offset + 1));
        entity.setTotalDistance(cursor.getFloat(offset + 2));
        entity.setTotalCalories(cursor.getInt(offset + 3));
        entity.setDateStr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimestamp(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Watch_SmartBand_SportDataModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Watch_SmartBand_SportDataModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
