package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.w811w814.OneceHrMode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ONECE_HR_MODE".
*/
public class OneceHrModeDao extends AbstractDao<OneceHrMode, Long> {

    public static final String TABLENAME = "ONECE_HR_MODE";

    /**
     * Properties of entity OneceHrMode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property WristbandBloodOxygenId = new Property(3, String.class, "wristbandBloodOxygenId", false, "WRISTBAND_BLOOD_OXYGEN_ID");
        public final static Property Timestamp = new Property(4, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property StrTimes = new Property(5, String.class, "strTimes", false, "STR_TIMES");
        public final static Property BloodOxygen = new Property(6, int.class, "bloodOxygen", false, "BLOOD_OXYGEN");
    };


    public OneceHrModeDao(DaoConfig config) {
        super(config);
    }
    
    public OneceHrModeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ONECE_HR_MODE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"WRISTBAND_BLOOD_OXYGEN_ID\" TEXT," + // 3: wristbandBloodOxygenId
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 4: timestamp
                "\"STR_TIMES\" TEXT," + // 5: strTimes
                "\"BLOOD_OXYGEN\" INTEGER NOT NULL );"); // 6: bloodOxygen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ONECE_HR_MODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OneceHrMode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String wristbandBloodOxygenId = entity.getWristbandBloodOxygenId();
        if (wristbandBloodOxygenId != null) {
            stmt.bindString(4, wristbandBloodOxygenId);
        }
        stmt.bindLong(5, entity.getTimestamp());
 
        String strTimes = entity.getStrTimes();
        if (strTimes != null) {
            stmt.bindString(6, strTimes);
        }
        stmt.bindLong(7, entity.getBloodOxygen());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OneceHrMode entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String wristbandBloodOxygenId = entity.getWristbandBloodOxygenId();
        if (wristbandBloodOxygenId != null) {
            stmt.bindString(4, wristbandBloodOxygenId);
        }
        stmt.bindLong(5, entity.getTimestamp());
 
        String strTimes = entity.getStrTimes();
        if (strTimes != null) {
            stmt.bindString(6, strTimes);
        }
        stmt.bindLong(7, entity.getBloodOxygen());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OneceHrMode readEntity(Cursor cursor, int offset) {
        OneceHrMode entity = new OneceHrMode( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wristbandBloodOxygenId
            cursor.getLong(offset + 4), // timestamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // strTimes
            cursor.getInt(offset + 6) // bloodOxygen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OneceHrMode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWristbandBloodOxygenId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimestamp(cursor.getLong(offset + 4));
        entity.setStrTimes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBloodOxygen(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OneceHrMode entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OneceHrMode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
