package com.isport.blelibrary.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.isport.blelibrary.db.table.watch_w516.Watch_W560_AlarmModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WATCH__W560__ALARM_MODEL".
*/
public class Watch_W560_AlarmModelDao extends AbstractDao<Watch_W560_AlarmModel, Long> {

    public static final String TABLENAME = "WATCH__W560__ALARM_MODEL";

    /**
     * Properties of entity Watch_W560_AlarmModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Index = new Property(1, int.class, "index", false, "INDEX");
        public final static Property IsEnable = new Property(2, boolean.class, "isEnable", false, "IS_ENABLE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property DeviceId = new Property(5, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property RepeatCount = new Property(6, int.class, "repeatCount", false, "REPEAT_COUNT");
        public final static Property TimeString = new Property(7, String.class, "timeString", false, "TIME_STRING");
        public final static Property MessageString = new Property(8, String.class, "messageString", false, "MESSAGE_STRING");
    };


    public Watch_W560_AlarmModelDao(DaoConfig config) {
        super(config);
    }
    
    public Watch_W560_AlarmModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WATCH__W560__ALARM_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"INDEX\" INTEGER NOT NULL ," + // 1: index
                "\"IS_ENABLE\" INTEGER NOT NULL ," + // 2: isEnable
                "\"NAME\" TEXT," + // 3: name
                "\"USER_ID\" TEXT," + // 4: userId
                "\"DEVICE_ID\" TEXT," + // 5: deviceId
                "\"REPEAT_COUNT\" INTEGER NOT NULL ," + // 6: repeatCount
                "\"TIME_STRING\" TEXT," + // 7: timeString
                "\"MESSAGE_STRING\" TEXT);"); // 8: messageString
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WATCH__W560__ALARM_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Watch_W560_AlarmModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindLong(3, entity.getIsEnable() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
        stmt.bindLong(7, entity.getRepeatCount());
 
        String timeString = entity.getTimeString();
        if (timeString != null) {
            stmt.bindString(8, timeString);
        }
 
        String messageString = entity.getMessageString();
        if (messageString != null) {
            stmt.bindString(9, messageString);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Watch_W560_AlarmModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIndex());
        stmt.bindLong(3, entity.getIsEnable() ? 1L: 0L);
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
        stmt.bindLong(7, entity.getRepeatCount());
 
        String timeString = entity.getTimeString();
        if (timeString != null) {
            stmt.bindString(8, timeString);
        }
 
        String messageString = entity.getMessageString();
        if (messageString != null) {
            stmt.bindString(9, messageString);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Watch_W560_AlarmModel readEntity(Cursor cursor, int offset) {
        Watch_W560_AlarmModel entity = new Watch_W560_AlarmModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // index
            cursor.getShort(offset + 2) != 0, // isEnable
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceId
            cursor.getInt(offset + 6), // repeatCount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timeString
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // messageString
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Watch_W560_AlarmModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIndex(cursor.getInt(offset + 1));
        entity.setIsEnable(cursor.getShort(offset + 2) != 0);
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRepeatCount(cursor.getInt(offset + 6));
        entity.setTimeString(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMessageString(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Watch_W560_AlarmModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Watch_W560_AlarmModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
