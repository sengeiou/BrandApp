package brandapp.isport.com.basicres.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import brandapp.isport.com.basicres.entry.WatchSportDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WATCH_SPORT_DATA_BEAN".
*/
public class WatchSportDataBeanDao extends AbstractDao<WatchSportDataBean, Long> {

    public static final String TABLENAME = "WATCH_SPORT_DATA_BEAN";

    /**
     * Properties of entity WatchSportDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StepNum = new Property(1, int.class, "stepNum", false, "STEP_NUM");
        public final static Property StepKm = new Property(2, float.class, "stepKm", false, "STEP_KM");
        public final static Property Cal = new Property(3, int.class, "cal", false, "CAL");
        public final static Property DateStr = new Property(4, String.class, "dateStr", false, "DATE_STR");
        public final static Property SportTime = new Property(5, int.class, "sportTime", false, "SPORT_TIME");
        public final static Property MaxHR = new Property(6, int.class, "maxHR", false, "MAX_HR");
        public final static Property MinHR = new Property(7, int.class, "minHR", false, "MIN_HR");
        public final static Property Mac = new Property(8, String.class, "mac", false, "MAC");
    };


    public WatchSportDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WatchSportDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WATCH_SPORT_DATA_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STEP_NUM\" INTEGER NOT NULL ," + // 1: stepNum
                "\"STEP_KM\" REAL NOT NULL ," + // 2: stepKm
                "\"CAL\" INTEGER NOT NULL ," + // 3: cal
                "\"DATE_STR\" TEXT," + // 4: dateStr
                "\"SPORT_TIME\" INTEGER NOT NULL ," + // 5: sportTime
                "\"MAX_HR\" INTEGER NOT NULL ," + // 6: maxHR
                "\"MIN_HR\" INTEGER NOT NULL ," + // 7: minHR
                "\"MAC\" TEXT);"); // 8: mac
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WATCH_SPORT_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WatchSportDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStepNum());
        stmt.bindDouble(3, entity.getStepKm());
        stmt.bindLong(4, entity.getCal());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(5, dateStr);
        }
        stmt.bindLong(6, entity.getSportTime());
        stmt.bindLong(7, entity.getMaxHR());
        stmt.bindLong(8, entity.getMinHR());
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(9, mac);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WatchSportDataBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStepNum());
        stmt.bindDouble(3, entity.getStepKm());
        stmt.bindLong(4, entity.getCal());
 
        String dateStr = entity.getDateStr();
        if (dateStr != null) {
            stmt.bindString(5, dateStr);
        }
        stmt.bindLong(6, entity.getSportTime());
        stmt.bindLong(7, entity.getMaxHR());
        stmt.bindLong(8, entity.getMinHR());
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(9, mac);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WatchSportDataBean readEntity(Cursor cursor, int offset) {
        WatchSportDataBean entity = new WatchSportDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // stepNum
            cursor.getFloat(offset + 2), // stepKm
            cursor.getInt(offset + 3), // cal
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dateStr
            cursor.getInt(offset + 5), // sportTime
            cursor.getInt(offset + 6), // maxHR
            cursor.getInt(offset + 7), // minHR
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // mac
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WatchSportDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStepNum(cursor.getInt(offset + 1));
        entity.setStepKm(cursor.getFloat(offset + 2));
        entity.setCal(cursor.getInt(offset + 3));
        entity.setDateStr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSportTime(cursor.getInt(offset + 5));
        entity.setMaxHR(cursor.getInt(offset + 6));
        entity.setMinHR(cursor.getInt(offset + 7));
        entity.setMac(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WatchSportDataBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WatchSportDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
