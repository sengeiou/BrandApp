package brandapp.isport.com.basicres.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import brandapp.isport.com.basicres.entry.ScaleCalculateBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCALE_CALCULATE_BEAN".
*/
public class ScaleCalculateBeanDao extends AbstractDao<ScaleCalculateBean, Long> {

    public static final String TABLENAME = "SCALE_CALCULATE_BEAN";

    /**
     * Properties of entity ScaleCalculateBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property DeviceType = new Property(2, int.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property Mac = new Property(3, String.class, "mac", false, "MAC");
        public final static Property Weight = new Property(4, float.class, "weight", false, "WEIGHT");
        public final static Property Resistance = new Property(5, float.class, "resistance", false, "RESISTANCE");
        public final static Property EXF_extracellularFluid = new Property(6, float.class, "EXF_extracellularFluid", false, "EXF_EXTRACELLULAR_FLUID");
        public final static Property InF_intracellularFluid = new Property(7, float.class, "InF_intracellularFluid", false, "IN_F_INTRACELLULAR_FLUID");
        public final static Property TF_totalWaterWeight = new Property(8, float.class, "TF_totalWaterWeight", false, "TF_TOTAL_WATER_WEIGHT");
        public final static Property TFR_percentWaterContent = new Property(9, float.class, "TFR_percentWaterContent", false, "TFR_PERCENT_WATER_CONTENT");
        public final static Property LBM_loseFatWeight = new Property(10, float.class, "LBM_loseFatWeight", false, "LBM_LOSE_FAT_WEIGHT");
        public final static Property SLM_muscleWeight = new Property(11, float.class, "SLM_muscleWeight", false, "SLM_MUSCLE_WEIGHT");
        public final static Property PM_protein = new Property(12, float.class, "PM_protein", false, "PM_PROTEIN");
        public final static Property FM_fatWeight = new Property(13, float.class, "FM_fatWeight", false, "FM_FAT_WEIGHT");
        public final static Property BFR_percentageFat = new Property(14, float.class, "BFR_percentageFat", false, "BFR_PERCENTAGE_FAT");
        public final static Property EE_edemaTest = new Property(15, float.class, "EE_edemaTest", false, "EE_EDEMA_TEST");
        public final static Property OD_obesityDegree = new Property(16, float.class, "OD_obesityDegree", false, "OD_OBESITY_DEGREE");
        public final static Property MC_muscleControl = new Property(17, float.class, "MC_muscleControl", false, "MC_MUSCLE_CONTROL");
        public final static Property WC_weightControl = new Property(18, float.class, "WC_weightControl", false, "WC_WEIGHT_CONTROL");
        public final static Property BMR_basalMetabolism = new Property(19, float.class, "BMR_basalMetabolism", false, "BMR_BASAL_METABOLISM");
        public final static Property MSW_inorganicSalt = new Property(20, float.class, "MSW_inorganicSalt", false, "MSW_INORGANIC_SALT");
        public final static Property VFR_visceralFatLevel = new Property(21, float.class, "VFR_visceralFatLevel", false, "VFR_VISCERAL_FAT_LEVEL");
        public final static Property BodyAge = new Property(22, float.class, "BodyAge", false, "BODY_AGE");
        public final static Property IndividualScore = new Property(23, float.class, "individualScore", false, "INDIVIDUAL_SCORE");
    };


    public ScaleCalculateBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ScaleCalculateBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCALE_CALCULATE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"DEVICE_TYPE\" INTEGER NOT NULL ," + // 2: deviceType
                "\"MAC\" TEXT," + // 3: mac
                "\"WEIGHT\" REAL NOT NULL ," + // 4: weight
                "\"RESISTANCE\" REAL NOT NULL ," + // 5: resistance
                "\"EXF_EXTRACELLULAR_FLUID\" REAL NOT NULL ," + // 6: EXF_extracellularFluid
                "\"IN_F_INTRACELLULAR_FLUID\" REAL NOT NULL ," + // 7: InF_intracellularFluid
                "\"TF_TOTAL_WATER_WEIGHT\" REAL NOT NULL ," + // 8: TF_totalWaterWeight
                "\"TFR_PERCENT_WATER_CONTENT\" REAL NOT NULL ," + // 9: TFR_percentWaterContent
                "\"LBM_LOSE_FAT_WEIGHT\" REAL NOT NULL ," + // 10: LBM_loseFatWeight
                "\"SLM_MUSCLE_WEIGHT\" REAL NOT NULL ," + // 11: SLM_muscleWeight
                "\"PM_PROTEIN\" REAL NOT NULL ," + // 12: PM_protein
                "\"FM_FAT_WEIGHT\" REAL NOT NULL ," + // 13: FM_fatWeight
                "\"BFR_PERCENTAGE_FAT\" REAL NOT NULL ," + // 14: BFR_percentageFat
                "\"EE_EDEMA_TEST\" REAL NOT NULL ," + // 15: EE_edemaTest
                "\"OD_OBESITY_DEGREE\" REAL NOT NULL ," + // 16: OD_obesityDegree
                "\"MC_MUSCLE_CONTROL\" REAL NOT NULL ," + // 17: MC_muscleControl
                "\"WC_WEIGHT_CONTROL\" REAL NOT NULL ," + // 18: WC_weightControl
                "\"BMR_BASAL_METABOLISM\" REAL NOT NULL ," + // 19: BMR_basalMetabolism
                "\"MSW_INORGANIC_SALT\" REAL NOT NULL ," + // 20: MSW_inorganicSalt
                "\"VFR_VISCERAL_FAT_LEVEL\" REAL NOT NULL ," + // 21: VFR_visceralFatLevel
                "\"BODY_AGE\" REAL NOT NULL ," + // 22: BodyAge
                "\"INDIVIDUAL_SCORE\" REAL NOT NULL );"); // 23: individualScore
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCALE_CALCULATE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScaleCalculateBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getDeviceType());
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(4, mac);
        }
        stmt.bindDouble(5, entity.getWeight());
        stmt.bindDouble(6, entity.getResistance());
        stmt.bindDouble(7, entity.getEXF_extracellularFluid());
        stmt.bindDouble(8, entity.getInF_intracellularFluid());
        stmt.bindDouble(9, entity.getTF_totalWaterWeight());
        stmt.bindDouble(10, entity.getTFR_percentWaterContent());
        stmt.bindDouble(11, entity.getLBM_loseFatWeight());
        stmt.bindDouble(12, entity.getSLM_muscleWeight());
        stmt.bindDouble(13, entity.getPM_protein());
        stmt.bindDouble(14, entity.getFM_fatWeight());
        stmt.bindDouble(15, entity.getBFR_percentageFat());
        stmt.bindDouble(16, entity.getEE_edemaTest());
        stmt.bindDouble(17, entity.getOD_obesityDegree());
        stmt.bindDouble(18, entity.getMC_muscleControl());
        stmt.bindDouble(19, entity.getWC_weightControl());
        stmt.bindDouble(20, entity.getBMR_basalMetabolism());
        stmt.bindDouble(21, entity.getMSW_inorganicSalt());
        stmt.bindDouble(22, entity.getVFR_visceralFatLevel());
        stmt.bindDouble(23, entity.getBodyAge());
        stmt.bindDouble(24, entity.getIndividualScore());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScaleCalculateBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
        stmt.bindLong(3, entity.getDeviceType());
 
        String mac = entity.getMac();
        if (mac != null) {
            stmt.bindString(4, mac);
        }
        stmt.bindDouble(5, entity.getWeight());
        stmt.bindDouble(6, entity.getResistance());
        stmt.bindDouble(7, entity.getEXF_extracellularFluid());
        stmt.bindDouble(8, entity.getInF_intracellularFluid());
        stmt.bindDouble(9, entity.getTF_totalWaterWeight());
        stmt.bindDouble(10, entity.getTFR_percentWaterContent());
        stmt.bindDouble(11, entity.getLBM_loseFatWeight());
        stmt.bindDouble(12, entity.getSLM_muscleWeight());
        stmt.bindDouble(13, entity.getPM_protein());
        stmt.bindDouble(14, entity.getFM_fatWeight());
        stmt.bindDouble(15, entity.getBFR_percentageFat());
        stmt.bindDouble(16, entity.getEE_edemaTest());
        stmt.bindDouble(17, entity.getOD_obesityDegree());
        stmt.bindDouble(18, entity.getMC_muscleControl());
        stmt.bindDouble(19, entity.getWC_weightControl());
        stmt.bindDouble(20, entity.getBMR_basalMetabolism());
        stmt.bindDouble(21, entity.getMSW_inorganicSalt());
        stmt.bindDouble(22, entity.getVFR_visceralFatLevel());
        stmt.bindDouble(23, entity.getBodyAge());
        stmt.bindDouble(24, entity.getIndividualScore());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScaleCalculateBean readEntity(Cursor cursor, int offset) {
        ScaleCalculateBean entity = new ScaleCalculateBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.getInt(offset + 2), // deviceType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mac
            cursor.getFloat(offset + 4), // weight
            cursor.getFloat(offset + 5), // resistance
            cursor.getFloat(offset + 6), // EXF_extracellularFluid
            cursor.getFloat(offset + 7), // InF_intracellularFluid
            cursor.getFloat(offset + 8), // TF_totalWaterWeight
            cursor.getFloat(offset + 9), // TFR_percentWaterContent
            cursor.getFloat(offset + 10), // LBM_loseFatWeight
            cursor.getFloat(offset + 11), // SLM_muscleWeight
            cursor.getFloat(offset + 12), // PM_protein
            cursor.getFloat(offset + 13), // FM_fatWeight
            cursor.getFloat(offset + 14), // BFR_percentageFat
            cursor.getFloat(offset + 15), // EE_edemaTest
            cursor.getFloat(offset + 16), // OD_obesityDegree
            cursor.getFloat(offset + 17), // MC_muscleControl
            cursor.getFloat(offset + 18), // WC_weightControl
            cursor.getFloat(offset + 19), // BMR_basalMetabolism
            cursor.getFloat(offset + 20), // MSW_inorganicSalt
            cursor.getFloat(offset + 21), // VFR_visceralFatLevel
            cursor.getFloat(offset + 22), // BodyAge
            cursor.getFloat(offset + 23) // individualScore
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScaleCalculateBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceType(cursor.getInt(offset + 2));
        entity.setMac(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeight(cursor.getFloat(offset + 4));
        entity.setResistance(cursor.getFloat(offset + 5));
        entity.setEXF_extracellularFluid(cursor.getFloat(offset + 6));
        entity.setInF_intracellularFluid(cursor.getFloat(offset + 7));
        entity.setTF_totalWaterWeight(cursor.getFloat(offset + 8));
        entity.setTFR_percentWaterContent(cursor.getFloat(offset + 9));
        entity.setLBM_loseFatWeight(cursor.getFloat(offset + 10));
        entity.setSLM_muscleWeight(cursor.getFloat(offset + 11));
        entity.setPM_protein(cursor.getFloat(offset + 12));
        entity.setFM_fatWeight(cursor.getFloat(offset + 13));
        entity.setBFR_percentageFat(cursor.getFloat(offset + 14));
        entity.setEE_edemaTest(cursor.getFloat(offset + 15));
        entity.setOD_obesityDegree(cursor.getFloat(offset + 16));
        entity.setMC_muscleControl(cursor.getFloat(offset + 17));
        entity.setWC_weightControl(cursor.getFloat(offset + 18));
        entity.setBMR_basalMetabolism(cursor.getFloat(offset + 19));
        entity.setMSW_inorganicSalt(cursor.getFloat(offset + 20));
        entity.setVFR_visceralFatLevel(cursor.getFloat(offset + 21));
        entity.setBodyAge(cursor.getFloat(offset + 22));
        entity.setIndividualScore(cursor.getFloat(offset + 23));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScaleCalculateBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScaleCalculateBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
